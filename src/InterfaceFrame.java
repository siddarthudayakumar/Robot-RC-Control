
import java.awt.BasicStroke;
import java.awt.BorderLayout;
import java.awt.Color;
import java.awt.Dimension;
import java.awt.Graphics;
import java.awt.Graphics2D;
import java.awt.Point;
import java.awt.RenderingHints;
import java.awt.Stroke;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.MouseAdapter;
import java.awt.event.MouseEvent;
import java.util.Hashtable;
import javax.swing.JLabel;
import javax.swing.JPanel;
import javax.swing.JSlider;
import javax.swing.SwingConstants;
import javax.swing.SwingUtilities;
import javax.swing.Timer;

/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */

/**
 *
 * @author Siddarth
 */
public class InterfaceFrame extends javax.swing.JFrame {

    /**
     * Creates new form InterfaceFrame
     */
    public InterfaceFrame() {
        initComponents();
        //Setting the Required Labels to Visible/Invisible Based on their States
        ImageLabel.setVisible(false);
        CamText.setVisible(true);
        SpeedLabel.setForeground(new java.awt.Color(0, 153, 0));
        ArmStatLabel.setForeground(new java.awt.Color(0, 153, 0));
        ClawDownLabel.setForeground(new java.awt.Color(0, 153, 0));
        ClawUpLabel.setForeground(new java.awt.Color(255, 0, 0));
        CamModeLabel.setVisible(false);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")// I used Netbeans GUI Builder to build the UI so Below is the auto generated Code
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        ImagePanel = new javax.swing.JPanel();
        ImageLabel = new javax.swing.JLabel();
        CamText = new javax.swing.JLabel();
        CamControlPanel = new javax.swing.JPanel();
        CamToggle = new javax.swing.JToggleButton();
        CameraLabel = new javax.swing.JLabel();
        CamModeLabel = new javax.swing.JLabel();
        ShutterButton = new javax.swing.JButton();
        TempPanel = new javax.swing.JPanel();
        TempLabel = new javax.swing.JLabel();
        TempToggleButton = new javax.swing.JToggleButton();
        MotionPanel = new javax.swing.JPanel();
        ForwardButton = new javax.swing.JToggleButton();
        ReverseButton = new javax.swing.JToggleButton();
        StopButton = new javax.swing.JToggleButton();
        jPanel1 = new javax.swing.JPanel();
        TurnSlider = new javax.swing.JSlider();
        LeftTurnLabel = new javax.swing.JLabel();
        RightTurnLabel = new javax.swing.JLabel();
        LeftTurnButton = new javax.swing.JButton();
        RightTurnButton = new javax.swing.JButton();
        CenterButton = new javax.swing.JButton();
        SlowToggle = new javax.swing.JToggleButton();
        MediumToggle = new javax.swing.JToggleButton();
        FastToggle = new javax.swing.JToggleButton();
        ClawPanel = new javax.swing.JPanel();
        ArmSlider = new javax.swing.JSlider();
        ClawUpLabel = new javax.swing.JLabel();
        ClawDownLabel = new javax.swing.JLabel();
        ClawUpToggle = new javax.swing.JToggleButton();
        ArmStatLabel = new javax.swing.JLabel();
        ClawDownButton = new javax.swing.JButton();
        StatusPanel = new javax.swing.JPanel();
        MotionLabel = new javax.swing.JLabel();
        SpeedLabel = new javax.swing.JLabel();
        SpeedTitleLabel = new javax.swing.JLabel();
        MotionStatLabel = new javax.swing.JLabel();
        TurnStatLabel = new javax.swing.JLabel();
        jPanel2 = new javax.swing.JPanel();
        ClawStatLabel = new javax.swing.JLabel();
        ClawToggle = new javax.swing.JToggleButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Curiosity Interface");
        setResizable(false);

        ImagePanel.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Camera Display", javax.swing.border.TitledBorder.CENTER, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Monospaced", 0, 11))); // NOI18N
        ImagePanel.setPreferredSize(new java.awt.Dimension(300, 250));

        ImageLabel.setIcon(new javax.swing.ImageIcon(getClass().getResource("/ImagePkg/mars.jpg"))); // NOI18N
        ImageLabel.setText("jLabel1");

        CamText.setFont(new java.awt.Font("Monospaced", 1, 14)); // NOI18N
        CamText.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        CamText.setText("TURN CAMERA ON");

        javax.swing.GroupLayout ImagePanelLayout = new javax.swing.GroupLayout(ImagePanel);
        ImagePanel.setLayout(ImagePanelLayout);
        ImagePanelLayout.setHorizontalGroup(
            ImagePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, ImagePanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(ImageLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)
                .addContainerGap())
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, ImagePanelLayout.createSequentialGroup()
                .addContainerGap(107, Short.MAX_VALUE)
                .addComponent(CamText)
                .addGap(104, 104, 104))
        );
        ImagePanelLayout.setVerticalGroup(
            ImagePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(ImagePanelLayout.createSequentialGroup()
                .addComponent(ImageLabel)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(CamText))
        );

        CamControlPanel.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Camera Control", javax.swing.border.TitledBorder.CENTER, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Monospaced", 0, 11))); // NOI18N

        CamToggle.setText("<html>\n<font size = \"3\"  face =\"Courier New, Courier, monospace\"><strong>Camera ON/OFF</strong></font>\n</html>");
        CamToggle.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                CamToggleActionPerformed(evt);
            }
        });

        CameraLabel.setFont(new java.awt.Font("Monospaced", 1, 18)); // NOI18N
        CameraLabel.setForeground(new java.awt.Color(255, 0, 0));
        CameraLabel.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        CameraLabel.setText("CAMERA OFF");

        CamModeLabel.setFont(new java.awt.Font("Monospaced", 1, 18)); // NOI18N
        CamModeLabel.setForeground(new java.awt.Color(0, 153, 0));
        CamModeLabel.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        CamModeLabel.setText("Picture Taken!");

        ShutterButton.setFont(new java.awt.Font("Monospaced", 1, 12)); // NOI18N
        ShutterButton.setText("Take Picture");
        ShutterButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ShutterButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout CamControlPanelLayout = new javax.swing.GroupLayout(CamControlPanel);
        CamControlPanel.setLayout(CamControlPanelLayout);
        CamControlPanelLayout.setHorizontalGroup(
            CamControlPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(CamControlPanelLayout.createSequentialGroup()
                .addGap(130, 130, 130)
                .addGroup(CamControlPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(ShutterButton, javax.swing.GroupLayout.PREFERRED_SIZE, 154, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(CameraLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 154, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(CamToggle, javax.swing.GroupLayout.PREFERRED_SIZE, 154, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(CamModeLabel))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        CamControlPanelLayout.setVerticalGroup(
            CamControlPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, CamControlPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(CameraLabel)
                .addGap(18, 18, 18)
                .addComponent(CamToggle, javax.swing.GroupLayout.PREFERRED_SIZE, 75, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(CamModeLabel)
                .addGap(18, 18, 18)
                .addComponent(ShutterButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGap(23, 23, 23))
        );

        TempPanel.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Temperature Sensor", javax.swing.border.TitledBorder.CENTER, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Monospaced", 0, 11))); // NOI18N

        TempLabel.setFont(new java.awt.Font("Monospaced", 1, 18)); // NOI18N
        TempLabel.setForeground(new java.awt.Color(51, 153, 255));
        TempLabel.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        TempLabel.setText("TEMPERATURE : 00F");

        TempToggleButton.setText("<html>\n<font size = \"3\"  face =\"Courier New, Courier, monospace\"><strong> Get Temperature</strong></font>\n</html>");
        TempToggleButton.setActionCommand("<html>\n<font size = \"2\" face =\"Courier New, Courier, monospace\"> Get Temperature</font>\n</html>");
        TempToggleButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                TempToggleButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout TempPanelLayout = new javax.swing.GroupLayout(TempPanel);
        TempPanel.setLayout(TempPanelLayout);
        TempPanelLayout.setHorizontalGroup(
            TempPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(TempPanelLayout.createSequentialGroup()
                .addGap(45, 45, 45)
                .addGroup(TempPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(TempLabel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(TempToggleButton))
                .addContainerGap(47, Short.MAX_VALUE))
        );
        TempPanelLayout.setVerticalGroup(
            TempPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(TempPanelLayout.createSequentialGroup()
                .addGap(26, 26, 26)
                .addComponent(TempLabel)
                .addGap(30, 30, 30)
                .addComponent(TempToggleButton, javax.swing.GroupLayout.PREFERRED_SIZE, 70, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        MotionPanel.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Motion Controls", javax.swing.border.TitledBorder.CENTER, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Monospaced", 0, 11))); // NOI18N

        ForwardButton.setText("<html>\n<font size = \"3\"  face =\"Courier New, Courier, monospace\"><strong>Forward\n</strong></font>\n</html>");
        ForwardButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ForwardButtonActionPerformed(evt);
            }
        });

        ReverseButton.setText("<html> <font size = \"3\"  face =\"Courier New, Courier, monospace\"><strong>Reverse</strong></font> </html>");
        ReverseButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ReverseButtonActionPerformed(evt);
            }
        });

        StopButton.setText("<html>\n<font size = \"3\"  face =\"Courier New, Courier, monospace\"><strong>Stop</strong></font>\n</html>");
        StopButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                StopButtonActionPerformed(evt);
            }
        });

        jPanel1.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Robot Turn Control", javax.swing.border.TitledBorder.CENTER, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Monospaced", 0, 11))); // NOI18N

        TurnSlider.setMajorTickSpacing(1);
        TurnSlider.setMaximum(10);
        TurnSlider.setPaintTicks(true);
        TurnSlider.setSnapToTicks(true);
        TurnSlider.setValue(5);

        LeftTurnLabel.setFont(new java.awt.Font("Monospaced", 1, 11)); // NOI18N
        LeftTurnLabel.setText("<html>\nLeft[0<sup>0</sup>]\n</html>");

        RightTurnLabel.setFont(new java.awt.Font("Monospaced", 1, 11)); // NOI18N
        RightTurnLabel.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        RightTurnLabel.setText("<html>\nRight[360<sup>0</sup>]\n</html>");

        LeftTurnButton.setText("<html>\n<font size = \"3\"  face =\"Courier New, Courier, monospace\"><strong>Turn Left\n</strong></font>\n</html>");
        LeftTurnButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                LeftTurnButtonActionPerformed(evt);
            }
        });

        RightTurnButton.setText("<html>\n<font size = \"3\"  face =\"Courier New, Courier, monospace\"><strong>Turn Right\n</strong></font>\n</html>");
        RightTurnButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                RightTurnButtonActionPerformed(evt);
            }
        });

        CenterButton.setText("<html>\n<font size = \"3\"  face =\"Courier New, Courier, monospace\"><strong>Center Robot\n</strong></font>\n</html>");
        CenterButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                CenterButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(26, 26, 26)
                        .addComponent(TurnSlider, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(LeftTurnLabel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(RightTurnLabel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(LeftTurnButton, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 30, Short.MAX_VALUE)
                        .addComponent(RightTurnButton, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap())
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(62, 62, 62)
                .addComponent(CenterButton, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(LeftTurnLabel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(RightTurnLabel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(TurnSlider, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(LeftTurnButton, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(RightTurnButton, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 11, Short.MAX_VALUE)
                .addComponent(CenterButton, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );

        SlowToggle.setText("<html>\n<font size = \"3\"  face =\"Courier New, Courier, monospace\"><strong>Slow\n</strong></font>\n</html>");
        SlowToggle.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                SlowToggleActionPerformed(evt);
            }
        });

        MediumToggle.setText("<html>\n<font size = \"3\"  face =\"Courier New, Courier, monospace\"><strong>Medium\n</strong></font>\n</html>");
        MediumToggle.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                MediumToggleActionPerformed(evt);
            }
        });

        FastToggle.setText("<html>\n<font size = \"3\"  face =\"Courier New, Courier, monospace\"><strong>Fast\n</strong></font>\n</html>");
        FastToggle.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                FastToggleActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout MotionPanelLayout = new javax.swing.GroupLayout(MotionPanel);
        MotionPanel.setLayout(MotionPanelLayout);
        MotionPanelLayout.setHorizontalGroup(
            MotionPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, MotionPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(MotionPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                    .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(MotionPanelLayout.createSequentialGroup()
                        .addComponent(SlowToggle, javax.swing.GroupLayout.PREFERRED_SIZE, 82, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(MediumToggle, javax.swing.GroupLayout.PREFERRED_SIZE, 78, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, Short.MAX_VALUE)
                        .addComponent(FastToggle, javax.swing.GroupLayout.PREFERRED_SIZE, 78, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 23, Short.MAX_VALUE)
                .addGroup(MotionPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(ForwardButton, javax.swing.GroupLayout.DEFAULT_SIZE, 124, Short.MAX_VALUE)
                    .addComponent(ReverseButton)
                    .addComponent(StopButton))
                .addContainerGap())
        );
        MotionPanelLayout.setVerticalGroup(
            MotionPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, MotionPanelLayout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(MotionPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(MotionPanelLayout.createSequentialGroup()
                        .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addGroup(MotionPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(SlowToggle, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(MediumToggle, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(FastToggle, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(MotionPanelLayout.createSequentialGroup()
                        .addComponent(ForwardButton, javax.swing.GroupLayout.PREFERRED_SIZE, 60, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(ReverseButton, javax.swing.GroupLayout.PREFERRED_SIZE, 61, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(StopButton, javax.swing.GroupLayout.PREFERRED_SIZE, 63, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap())
        );

        ClawPanel.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Arm Controls", javax.swing.border.TitledBorder.CENTER, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Monospaced", 0, 11))); // NOI18N

        ArmSlider.setMajorTickSpacing(10);
        ArmSlider.setMaximum(90);
        ArmSlider.setOrientation(javax.swing.JSlider.VERTICAL);
        ArmSlider.setPaintTicks(true);
        ArmSlider.setSnapToTicks(true);
        ArmSlider.setValue(0);

        ClawUpLabel.setFont(new java.awt.Font("Monospaced", 1, 11)); // NOI18N
        ClawUpLabel.setText("<html> Arm Up[90<sup>0</sup>] </html>");

        ClawDownLabel.setFont(new java.awt.Font("Monospaced", 1, 11)); // NOI18N
        ClawDownLabel.setText("<html> Arm Down[0<sup>0</sup>] </html>");

        ClawUpToggle.setText("<html>\n<font size = \"3\"  face =\"Courier New, Courier, monospace\"><strong>Arm Up\n</strong></font>\n</html>");
        ClawUpToggle.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ClawUpToggleActionPerformed(evt);
            }
        });

        ArmStatLabel.setFont(new java.awt.Font("Monospaced", 1, 12)); // NOI18N
        ArmStatLabel.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        ArmStatLabel.setText("Arm is Down");

        ClawDownButton.setText("<html>\n<font size = \"3\"  face =\"Courier New, Courier, monospace\"><strong> Arm Down\n</strong></font>\n</html>");
        ClawDownButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ClawDownButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout ClawPanelLayout = new javax.swing.GroupLayout(ClawPanel);
        ClawPanel.setLayout(ClawPanelLayout);
        ClawPanelLayout.setHorizontalGroup(
            ClawPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(ClawPanelLayout.createSequentialGroup()
                .addGroup(ClawPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(ClawPanelLayout.createSequentialGroup()
                        .addGap(29, 29, 29)
                        .addComponent(ArmSlider, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(35, 35, 35)
                        .addGroup(ClawPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(ClawDownButton, javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(ArmStatLabel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(ClawUpToggle)))
                    .addGroup(ClawPanelLayout.createSequentialGroup()
                        .addContainerGap()
                        .addGroup(ClawPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(ClawUpLabel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(ClawDownLabel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addContainerGap())
        );
        ClawPanelLayout.setVerticalGroup(
            ClawPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(ClawPanelLayout.createSequentialGroup()
                .addComponent(ClawUpLabel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(ClawPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(ArmSlider, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(ClawPanelLayout.createSequentialGroup()
                        .addComponent(ClawUpToggle, javax.swing.GroupLayout.PREFERRED_SIZE, 45, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(42, 42, 42)
                        .addComponent(ArmStatLabel)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(ClawDownButton, javax.swing.GroupLayout.PREFERRED_SIZE, 45, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(ClawDownLabel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
        );

        StatusPanel.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Robot Status", javax.swing.border.TitledBorder.CENTER, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Monospaced", 0, 11))); // NOI18N

        MotionLabel.setFont(new java.awt.Font("Monospaced", 1, 14)); // NOI18N
        MotionLabel.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        MotionLabel.setText("IDLE");

        SpeedLabel.setFont(new java.awt.Font("Monospaced", 1, 14)); // NOI18N
        SpeedLabel.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        SpeedLabel.setText("DEFAULT");

        SpeedTitleLabel.setFont(new java.awt.Font("Monospaced", 3, 11)); // NOI18N
        SpeedTitleLabel.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        SpeedTitleLabel.setText("<html><u>Robot Speed</u></html>");

        MotionStatLabel.setFont(new java.awt.Font("Monospaced", 3, 11)); // NOI18N
        MotionStatLabel.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        MotionStatLabel.setText("<html><u>Motion Status</u></html>");

        TurnStatLabel.setFont(new java.awt.Font("Monospaced", 1, 12)); // NOI18N
        TurnStatLabel.setForeground(new java.awt.Color(51, 153, 0));
        TurnStatLabel.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        TurnStatLabel.setText("Robot is Centered\n");

        javax.swing.GroupLayout StatusPanelLayout = new javax.swing.GroupLayout(StatusPanel);
        StatusPanel.setLayout(StatusPanelLayout);
        StatusPanelLayout.setHorizontalGroup(
            StatusPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(StatusPanelLayout.createSequentialGroup()
                .addGroup(StatusPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(StatusPanelLayout.createSequentialGroup()
                        .addContainerGap()
                        .addGroup(StatusPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(MotionLabel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(SpeedLabel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                    .addGroup(StatusPanelLayout.createSequentialGroup()
                        .addGroup(StatusPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(StatusPanelLayout.createSequentialGroup()
                                .addGap(32, 32, 32)
                                .addComponent(MotionStatLabel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(StatusPanelLayout.createSequentialGroup()
                                .addGap(37, 37, 37)
                                .addComponent(SpeedTitleLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 86, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addContainerGap())
            .addComponent(TurnStatLabel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        StatusPanelLayout.setVerticalGroup(
            StatusPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(StatusPanelLayout.createSequentialGroup()
                .addGap(14, 14, 14)
                .addComponent(MotionStatLabel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(MotionLabel)
                .addGap(18, 18, 18)
                .addComponent(TurnStatLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 43, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(SpeedTitleLabel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(SpeedLabel)
                .addGap(21, 21, 21))
        );

        jPanel2.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Claw Controls", javax.swing.border.TitledBorder.CENTER, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Monospaced", 0, 11))); // NOI18N

        ClawStatLabel.setFont(new java.awt.Font("Monospaced", 1, 14)); // NOI18N
        ClawStatLabel.setForeground(new java.awt.Color(255, 0, 0));
        ClawStatLabel.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        ClawStatLabel.setText("Claw is Closed\n");

        ClawToggle.setText("<html>\n<font size = \"3\"  face =\"Courier New, Courier, monospace\"><strong>Claw Open/Close\n</strong></font>\n</html>");
        ClawToggle.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ClawToggleActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(ClawStatLabel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(ClawToggle, javax.swing.GroupLayout.DEFAULT_SIZE, 181, Short.MAX_VALUE))
                .addContainerGap())
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGap(30, 30, 30)
                .addComponent(ClawStatLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 47, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(ClawToggle, javax.swing.GroupLayout.PREFERRED_SIZE, 75, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(TempPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(ImagePanel, javax.swing.GroupLayout.PREFERRED_SIZE, 335, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(MotionPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(StatusPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(CamControlPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(ClawPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(ImagePanel, javax.swing.GroupLayout.DEFAULT_SIZE, 263, Short.MAX_VALUE)
                    .addComponent(CamControlPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(TempPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                    .addComponent(StatusPanel, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(MotionPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(ClawPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void CamToggleActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_CamToggleActionPerformed
        // TODO add your handling code here:
        if(CamToggle.isSelected())
        {   
            /*Once the Camera Toggle Button is Switched on, the Label reflects the ON STate of the camera,
            the Picture is displayed
            */
            CamText.setVisible(false);
            CameraLabel.setFont(new java.awt.Font("Monospaced", 1, 18)); // NOI18N
            CameraLabel.setForeground(new java.awt.Color(0, 153, 0));
            CameraLabel.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
            CameraLabel.setText("CAMERA ON");
            ImageLabel.setVisible(true);
        }
        else
        {
            /*Once the Camera Toggle Button is Switched off, the Label reflects the OFF state of the Camera
            */
            CameraLabel.setFont(new java.awt.Font("Monospaced", 1, 18)); // NOI18N
            CameraLabel.setForeground(new java.awt.Color(255, 0, 0));
            CameraLabel.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
            CameraLabel.setText("CAMERA OFF");
            ImageLabel.setVisible(false);
            CamText.setVisible(true);
        }
    }//GEN-LAST:event_CamToggleActionPerformed

    private void TempToggleButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_TempToggleButtonActionPerformed
        // TODO add your handling code here:
        //This Method allows us to view the temperature of the Surroundings. 
        if(TempToggleButton.isSelected())
        {
            /*Once the Toggle Button is Switched on, the Label brings up the temperature value
            I encoded in the program
            */
            TempLabel.setFont(new java.awt.Font("Monospaced", 1, 18)); // NOI18N
            TempLabel.setForeground(new java.awt.Color(51, 153, 255));
            TempLabel.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
            TempLabel.setText("TEMPERATURE : -67F");
            TempLabel.setVisible(true);
        }
        else
        {
            /*Once the Toggle Button is Switched off, the Label turns to sensing to show
              that the Robot is using it's temperature Sensors
            */
            TempLabel.setFont(new java.awt.Font("Monospaced", 1, 18)); // NOI18N
            TempLabel.setForeground(new java.awt.Color(51, 153, 255));
            TempLabel.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
            TempLabel.setText("SENSING...........");
            TempLabel.setVisible(true);
        }
    }//GEN-LAST:event_TempToggleButtonActionPerformed

    private void StopButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_StopButtonActionPerformed
        // TODO add your handling code here:
        //This Method shows us the state of the Robot once the Robot is in a Stop State
        if(StopButton.isSelected())
        {   
            /*Once the Toggle Button is Switched on, the Label turns to stopping to show that the Robot has stopped. 
            After it has stopped, the Robot's state label will change to IDLE after a 10 second timeout
            */
            ForwardButton.setSelected(false);
            ReverseButton.setSelected(false);
            MotionLabel.setFont(new java.awt.Font("Monospaced", 1, 14)); // NOI18N
            MotionLabel.setForeground(new java.awt.Color(255, 0, 0));
            MotionLabel.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
            MotionLabel.setText("STOPPING......");
            int delay = 10000; //Timer to Stop further motion of the Robot
            ActionListener taskPerformer = new ActionListener()
            {
                public void actionPerformed(ActionEvent evt)
                {
                    
                    MotionLabel.setFont(new java.awt.Font("Monospaced", 1, 14)); // NOI18N
                    MotionLabel.setForeground(new java.awt.Color(0, 0, 0));
                    MotionLabel.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
                    MotionLabel.setText("IDLE");
                }
            };
            new Timer(delay, taskPerformer).start();
        }
        else
        {   
            /*Once the Toggle Button is Switched off, the Label turns to reflect that the Robot 
                    is in an IDLE state
                    */
            //Changing the Label to reflect the Robot's Idle State
            MotionLabel.setFont(new java.awt.Font("Monospaced", 1, 14)); // NOI18N
            MotionLabel.setForeground(new java.awt.Color(0, 0, 0));
            MotionLabel.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
            MotionLabel.setText("IDLE");
        }
    }//GEN-LAST:event_StopButtonActionPerformed

    private void ReverseButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ReverseButtonActionPerformed
        // TODO add your handling code here:
        //Method to handle the reversing of the Robot
        if(ReverseButton.isSelected())
        {   
            //Changing the Label to reflect the Robot's Reverse Action
            ForwardButton.setSelected(false);
            StopButton.setSelected(false);
            MotionLabel.setFont(new java.awt.Font("Monospaced", 1, 14)); // NOI18N
            MotionLabel.setForeground(new java.awt.Color(204, 204, 0));
            MotionLabel.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
            MotionLabel.setText("REVERSING.....");
            int delay = 10000; //Timer to Stop further motion of the Robot
            ActionListener taskPerformer = new ActionListener()
            {
                public void actionPerformed(ActionEvent evt)
                {
                    //Changing the Label to reflect the Robot's State After it can't move further
                    MotionLabel.setFont(new java.awt.Font("Monospaced", 1, 14)); // NOI18N
                    MotionLabel.setForeground(new java.awt.Color(255, 0, 0));
                    MotionLabel.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
                    MotionLabel.setText("CAN'T MOVE FURTHER");
                }
            };
            new Timer(delay, taskPerformer).start();
        }
        else
        {
            //Changing the Label to reflect the Robot's Idle State
            MotionLabel.setFont(new java.awt.Font("Monospaced", 1, 14)); // NOI18N
            MotionLabel.setForeground(new java.awt.Color(0, 0, 0));
            MotionLabel.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
            MotionLabel.setText("IDLE");
        }
    }//GEN-LAST:event_ReverseButtonActionPerformed

    private void ForwardButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ForwardButtonActionPerformed
        // TODO add your handling code here:
        //This Method handles the forward movement for the Robot
        if(ForwardButton.isSelected())
        {   
            //Changing the Label to reflect the Robot's Forward Action
            ReverseButton.setSelected(false);
            StopButton.setSelected(false);
            MotionLabel.setFont(new java.awt.Font("Monospaced", 1, 14)); // NOI18N
            MotionLabel.setForeground(new java.awt.Color(0, 153, 0));
            MotionLabel.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
            MotionLabel.setText("MOVING FORWARD");
            int delay = 10000; //Timer to Stop further motion of the Robot
            ActionListener taskPerformer = new ActionListener()
            {
                public void actionPerformed(ActionEvent evt)
                {
                    //Changing the Label to reflect the Robot's state after it cannot move forward
                    MotionLabel.setFont(new java.awt.Font("Monospaced", 1, 14)); // NOI18N
                    MotionLabel.setForeground(new java.awt.Color(255, 0, 0));
                    MotionLabel.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
                    MotionLabel.setText("CAN'T MOVE FURTHER");
                }
            };
            new Timer(delay, taskPerformer).start();
        }
        else
        {
            //Changing the Label to reflect the Robot's Idle State
            MotionLabel.setFont(new java.awt.Font("Monospaced", 1, 14)); // NOI18N
            MotionLabel.setForeground(new java.awt.Color(0, 0, 0));
            MotionLabel.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
            MotionLabel.setText("IDLE");
        }
    }//GEN-LAST:event_ForwardButtonActionPerformed

    private void LeftTurnButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_LeftTurnButtonActionPerformed
        // TODO add your handling code here:
        //This method handles the actions that the Robot Interface does after clicking the Left Button
        TurnSlider.setValue(0); // Changing the Slider value to the Left most value
        RightTurnLabel.setForeground(Color.black);
        LeftTurnLabel.setForeground(new java.awt.Color(0, 153, 0));
        TurnStatLabel.setFont(new java.awt.Font("Monospaced", 1, 14)); // NOI18N
        TurnStatLabel.setForeground(new java.awt.Color(0, 153, 0));
        TurnStatLabel.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        TurnStatLabel.setText("Robot Turning Left"); //State of the Robot Reflected in the Status Label
    }//GEN-LAST:event_LeftTurnButtonActionPerformed

    private void RightTurnButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_RightTurnButtonActionPerformed
        // TODO add your handling code here:
        //This Method handles the actions that the Robot Interface performs after clciking on the Right Button
        TurnSlider.setValue(10); // Changing the Speed Slider value to the Right Most Value
        LeftTurnLabel.setForeground(Color.black);
        RightTurnLabel.setForeground(new java.awt.Color(0, 153, 0));
        TurnStatLabel.setFont(new java.awt.Font("Monospaced", 1, 14)); // NOI18N
        TurnStatLabel.setForeground(new java.awt.Color(0, 153, 0));
        TurnStatLabel.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        TurnStatLabel.setText("Robot Turning Right"); //State of the Robot Reflected in the Status Label
    }//GEN-LAST:event_RightTurnButtonActionPerformed

    private void SlowToggleActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_SlowToggleActionPerformed
        // TODO add your handling code here:
        //This Method handles the actions in the interface after toggling Slow Speed Button
        if(SlowToggle.isSelected())
        {   
            MediumToggle.setSelected(false);
            FastToggle.setSelected(false);
            SpeedLabel.setFont(new java.awt.Font("Monospaced", 1, 14)); // NOI18N
            SpeedLabel.setForeground(new java.awt.Color(255, 255, 0));
            SpeedLabel.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
            SpeedLabel.setText("Slow"); //Status Reflected in the Label
        }
        else
        {
            SpeedLabel.setFont(new java.awt.Font("Monospaced", 1, 14)); // NOI18N
            SpeedLabel.setForeground(new java.awt.Color(0, 153, 0));
            SpeedLabel.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
            SpeedLabel.setText("Default"); //Status Reflected in the Label
        }
    }//GEN-LAST:event_SlowToggleActionPerformed

    private void MediumToggleActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_MediumToggleActionPerformed
        // TODO add your handling code here:
         //This Method handles the actions in the interface after toggling Medium Speed Button
        if(MediumToggle.isSelected())
        {
            SlowToggle.setSelected(false);
            FastToggle.setSelected(false);
            SpeedLabel.setFont(new java.awt.Font("Monospaced", 1, 14)); // NOI18N
            SpeedLabel.setForeground(new java.awt.Color(255, 153, 0));
            SpeedLabel.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
            SpeedLabel.setText("Medium"); //Status Reflected in the Label
        }
        else
        {
            SpeedLabel.setFont(new java.awt.Font("Monospaced", 1, 14)); // NOI18N
            SpeedLabel.setForeground(new java.awt.Color(0, 153, 0));
            SpeedLabel.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
            SpeedLabel.setText("Default"); //Status Reflected in the Label
        }
    }//GEN-LAST:event_MediumToggleActionPerformed

    private void FastToggleActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_FastToggleActionPerformed
        // TODO add your handling code here:
         //This Method handles the actions in the interface after toggling Fast Speed Button
        if(FastToggle.isSelected())
        {
            SlowToggle.setSelected(false);
            MediumToggle.setSelected(false);
            SpeedLabel.setFont(new java.awt.Font("Monospaced", 1, 14)); // NOI18N
            SpeedLabel.setForeground(new java.awt.Color(255, 0, 0));
            SpeedLabel.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
            SpeedLabel.setText("Fast");  //Status Reflected in the Label
        }
        else
        {
            SpeedLabel.setFont(new java.awt.Font("Monospaced", 1, 14)); // NOI18N
            SpeedLabel.setForeground(new java.awt.Color(0, 153, 0));
            SpeedLabel.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
            SpeedLabel.setText("Default"); //Status Reflected in the Label
        }
    }//GEN-LAST:event_FastToggleActionPerformed

    private void CenterButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_CenterButtonActionPerformed
        // TODO add your handling code here:
        //This Method allows us to center the Robot after making it turn in a direction
        TurnSlider.setValue(5);
        LeftTurnLabel.setForeground(Color.black);
        RightTurnLabel.setForeground(Color.black);
        TurnStatLabel.setFont(new java.awt.Font("Monospaced", 1, 14)); // NOI18N
        TurnStatLabel.setForeground(new java.awt.Color(0, 153, 0));
        TurnStatLabel.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        TurnStatLabel.setText("Robot is Centered"); //Status Reflected in the Label
    }//GEN-LAST:event_CenterButtonActionPerformed

    private void ClawUpToggleActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ClawUpToggleActionPerformed
        // TODO add your handling code here:
        //This Method allows us to Move the Robot Arm UP
        if(ClawUpToggle.isSelected())
        {   
            ArmSlider.setValue(90); //The Button controls the Slider which acts as a visual cue for the Arm
            ArmStatLabel.setFont(new java.awt.Font("Monospaced", 1, 14)); // NOI18N
            ArmStatLabel.setForeground(new java.awt.Color(0, 153, 0));
            ArmStatLabel.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
            ArmStatLabel.setText("Arm is Up"); //Status Reflected in the Label
            ClawUpLabel.setForeground((new java.awt.Color(0, 153, 0)));
            ClawDownLabel.setForeground((new java.awt.Color(255, 0, 0)));
        }
        else
        {
            ArmSlider.setValue(0);
            ArmStatLabel.setFont(new java.awt.Font("Monospaced", 1, 14)); // NOI18N
            ArmStatLabel.setForeground(new java.awt.Color(0, 153, 0));
            ArmStatLabel.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
            ArmStatLabel.setText("Arm is Down"); //Status Reflected in the Label
            ClawDownLabel.setForeground((new java.awt.Color(0, 153, 0)));
            ClawUpLabel.setForeground((new java.awt.Color(255, 0, 0)));
        }
    }//GEN-LAST:event_ClawUpToggleActionPerformed

    private void ClawDownButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ClawDownButtonActionPerformed
        // TODO add your handling code here:
        //This Method is used to bring the Robot Arm to the Down position which is the Default
        ClawUpToggle.setSelected(false);
        ClawUpLabel.setForeground((new java.awt.Color(255, 0, 0)));
        ArmSlider.setValue(0); //The Button controls the Slider which acts as a visual cue for the Arm
        ArmStatLabel.setFont(new java.awt.Font("Monospaced", 1, 14)); // NOI18N
        ArmStatLabel.setForeground(new java.awt.Color(0, 153, 0));
        ArmStatLabel.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        ArmStatLabel.setText("Arm is Down"); //Status Reflected in the Label
        ClawDownLabel.setForeground((new java.awt.Color(0, 153, 0)));
    }//GEN-LAST:event_ClawDownButtonActionPerformed

    private void ClawToggleActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ClawToggleActionPerformed
        // TODO add your handling code here:
        //Method to Open and Close the Claw
        if(ClawToggle.isSelected())
        {
            ClawStatLabel.setFont(new java.awt.Font("Monospaced", 1, 14)); // NOI18N
            ClawStatLabel.setForeground(new java.awt.Color(0, 153, 0));
            ClawStatLabel.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
            ClawStatLabel.setText("Claw is Open"); //Status Reflected in the Label
        }
        else
        {
            ClawStatLabel.setFont(new java.awt.Font("Monospaced", 1, 14)); // NOI18N
            ClawStatLabel.setForeground(new java.awt.Color(255, 0, 0));
            ClawStatLabel.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
            ClawStatLabel.setText("Claw is Closed"); //Status Reflected in the Label
        }
    }//GEN-LAST:event_ClawToggleActionPerformed

    private void ShutterButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ShutterButtonActionPerformed
        // TODO add your handling code here:
        CamModeLabel.setVisible(true); //Status Reflected in the Label
    }//GEN-LAST:event_ShutterButtonActionPerformed
    

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(InterfaceFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(InterfaceFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(InterfaceFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(InterfaceFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        /*JSlider js4 = new JSlider(JSlider.HORIZONTAL);
         Hashtable<String, JLabel> table = new Hashtable<String, JLabel>();
         table.put("0", new JLabel("SLOW"));
         table.put("50", new JLabel("MEDIUM"));
         table.put("100", new JLabel("FAST"));
         js4.setLabelTable(table);
         js4.setPaintLabels(true);
         js4.setSnapToTicks(true);*/ //Unused Slider Code
         
        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new InterfaceFrame().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JSlider ArmSlider;
    private javax.swing.JLabel ArmStatLabel;
    private javax.swing.JPanel CamControlPanel;
    private javax.swing.JLabel CamModeLabel;
    private javax.swing.JLabel CamText;
    private javax.swing.JToggleButton CamToggle;
    private javax.swing.JLabel CameraLabel;
    private javax.swing.JButton CenterButton;
    private javax.swing.JButton ClawDownButton;
    private javax.swing.JLabel ClawDownLabel;
    private javax.swing.JPanel ClawPanel;
    private javax.swing.JLabel ClawStatLabel;
    private javax.swing.JToggleButton ClawToggle;
    private javax.swing.JLabel ClawUpLabel;
    private javax.swing.JToggleButton ClawUpToggle;
    private javax.swing.JToggleButton FastToggle;
    private javax.swing.JToggleButton ForwardButton;
    private javax.swing.JLabel ImageLabel;
    private javax.swing.JPanel ImagePanel;
    private javax.swing.JButton LeftTurnButton;
    private javax.swing.JLabel LeftTurnLabel;
    private javax.swing.JToggleButton MediumToggle;
    private javax.swing.JLabel MotionLabel;
    private javax.swing.JPanel MotionPanel;
    private javax.swing.JLabel MotionStatLabel;
    private javax.swing.JToggleButton ReverseButton;
    private javax.swing.JButton RightTurnButton;
    private javax.swing.JLabel RightTurnLabel;
    private javax.swing.JButton ShutterButton;
    private javax.swing.JToggleButton SlowToggle;
    private javax.swing.JLabel SpeedLabel;
    private javax.swing.JLabel SpeedTitleLabel;
    private javax.swing.JPanel StatusPanel;
    private javax.swing.JToggleButton StopButton;
    private javax.swing.JLabel TempLabel;
    private javax.swing.JPanel TempPanel;
    private javax.swing.JToggleButton TempToggleButton;
    private javax.swing.JSlider TurnSlider;
    private javax.swing.JLabel TurnStatLabel;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    // End of variables declaration//GEN-END:variables
}
